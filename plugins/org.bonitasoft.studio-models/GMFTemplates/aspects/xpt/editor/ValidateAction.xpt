/*
 * Copyright (C) 2009 BonitaSoft S.A.
 * BonitaSoft, 31 rue Gustave Eiffel - 38000 Grenoble
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2.0 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«EXTENSION xpt::editor::Utils»
«EXTENSION xpt::GenAuditRoot»

«AROUND createMarkersForStatus FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static void createMarkers(
			«IF editorGen.application = null»org.eclipse.core.resources.IFile
			«ELSE»org.eclipse.gmf.runtime.notation.View«ENDIF» target,
			org.eclipse.core.runtime.IStatus validationStatus,
			org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart) {
		if (validationStatus.isOK()) {
			return;
		}
		final org.eclipse.core.runtime.IStatus rootStatus = validationStatus;
		java.util.List allStatuses = new java.util.ArrayList();
		«getDiagramEditorUtilQualifiedClassName()».LazyElement2ViewMap element2ViewMap = new «getDiagramEditorUtilQualifiedClassName()».LazyElement2ViewMap(
						diagramEditPart.getDiagramView(),
						collectTargetElements(rootStatus, new «EXPAND CodeStyle::G('java.util.HashSet', 'org.eclipse.emf.ecore.EObject')»(), allStatuses));
		final java.util.List<org.bonitasoft.studio.common.Triple<String, String, String>> createdMarkers = new java.util.ArrayList<org.bonitasoft.studio.common.Triple<String,String,String>>();
		for (java.util.Iterator it = allStatuses.iterator(); it.hasNext();) {
			org.eclipse.emf.validation.model.IConstraintStatus nextStatus =
					(org.eclipse.emf.validation.model.IConstraintStatus) it.next();
			String constraintId = nextStatus.getConstraint().getDescriptor().getId();
			org.eclipse.gmf.runtime.notation.View view = «getDiagramEditorUtilQualifiedClassName()».findView(
					diagramEditPart, nextStatus.getTarget(), element2ViewMap);			
			final org.bonitasoft.studio.common.Triple<String, String, String> triple = new org.bonitasoft.studio.common.Triple<String, String, String>(constraintId, nextStatus.getMessage(),view.eResource().getURIFragment(view));
			if(!createdMarkers.contains(triple)){
				addMarker(constraintId,diagramEditPart.getViewer(), target, view.eResource().getURIFragment(view), 
						org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(nextStatus.getTarget(), true), 
						nextStatus.getMessage(), nextStatus.getSeverity());
				createdMarkers.add(triple);
			}
		}
	}
«ENDAROUND»

«AROUND createMarkersForDiagnostic FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static void createMarkers(
			«IF editorGen.application = null»org.eclipse.core.resources.IFile
			«ELSE»org.eclipse.gmf.runtime.notation.View«ENDIF» target,
			org.eclipse.emf.common.util.Diagnostic emfValidationStatus,
			org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart) {
		if (emfValidationStatus.getSeverity() == org.eclipse.emf.common.util.Diagnostic.OK) {
			return;
		}
		final org.eclipse.emf.common.util.Diagnostic rootStatus = emfValidationStatus;
		java.util.List allDiagnostics = new java.util.ArrayList();
		«getDiagramEditorUtilQualifiedClassName()».LazyElement2ViewMap element2ViewMap =
				new «getDiagramEditorUtilQualifiedClassName()».LazyElement2ViewMap(
						diagramEditPart.getDiagramView(),
						collectTargetElements(rootStatus, new «EXPAND CodeStyle::G('java.util.HashSet', 'org.eclipse.emf.ecore.EObject')»(), allDiagnostics));
		for (java.util.Iterator it = emfValidationStatus.getChildren().iterator(); it.hasNext();) {
			org.eclipse.emf.common.util.Diagnostic nextDiagnostic = (org.eclipse.emf.common.util.Diagnostic) it.next();
			java.util.List data = nextDiagnostic.getData();
			if (data != null && !data.isEmpty() && data.get(0) instanceof org.eclipse.emf.ecore.EObject) {
				org.eclipse.emf.ecore.EObject element = (org.eclipse.emf.ecore.EObject) data.get(0);
				org.eclipse.gmf.runtime.notation.View view = «getDiagramEditorUtilQualifiedClassName()».findView(
						diagramEditPart, element, element2ViewMap);
				addMarker(null,diagramEditPart.getViewer(), target, view.eResource().getURIFragment(view),
						org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(element, true),
						nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));
			}
		}
	}
«ENDAROUND»

«AROUND addMarker FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static void addMarker(String constaintId,org.eclipse.gef.EditPartViewer viewer,
			«IF editorGen.application = null»org.eclipse.core.resources.IFile
			«ELSE»org.eclipse.gmf.runtime.notation.View«ENDIF» target,
			String elementId, String location, String message, int statusSeverity) {
		if (target == null) {
			return;
		}
		«IF editorGen.application = null-»
		«getMarkerNavigationProviderQualifiedClassName()».addMarker(constaintId,
				target, elementId, location, message, statusSeverity);
		«ELSE-»
		new «EXPAND xpt::editor::ValidationMarker::qualifiedClassName»(
				location, message, statusSeverity).add(viewer, elementId);
		«ENDIF-»
	}
«ENDAROUND»

