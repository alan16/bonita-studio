/*
 * Copyright (c) 2006, 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::diagram::editparts::Utils»


«AROUND _constructor FOR gmfgen::GenNodeLabel-»

	private final org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener listener = new org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener() {

        @Override
        public void notifyChanged(org.eclipse.emf.common.notify.Notification event) {
            handleNotificationEvent(event);
        }
    };
    
    
    private final org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener expressionListener = new org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener() {

        @Override
        public void notifyChanged(org.eclipse.emf.common.notify.Notification event) {
            java.lang.Object newValue = event.getNewValue();
            if(newValue != null){
                org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker.getInstance(getEditingDomain()).addNotificationListener((org.eclipse.emf.ecore.EObject) newValue,
                        org.bonitasoft.studio.model.expression.ExpressionPackage.Literals.EXPRESSION__CONTENT, listener);
                listener.notifyChanged(new org.eclipse.emf.ecore.impl.ENotificationImpl((org.eclipse.emf.ecore.InternalEObject) newValue,  org.eclipse.emf.ecore.util.FeatureMapUtil.FeatureENotificationImpl.SET, org.bonitasoft.studio.model.expression.ExpressionPackage.Literals.EXPRESSION__CONTENT, null,  ((org.bonitasoft.studio.model.expression.Expression)newValue).getContent()));
            }

        }
    };

	«EXPAND xpt::Common::generatedMemberComment»
	public «editPartClassName»(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}
	
	«EXPAND activate»
	«EXPAND deactivate»
«ENDAROUND»

«AROUND createDefaultEditPoliciesBody FOR gmfgen::GenNodeLabel-»
	super.createDefaultEditPolicies();
	installEditPolicy(org.eclipse.gef.EditPolicy.SELECTION_FEEDBACK_ROLE, new «getDiagram().getTextSelectionEditPolicyQualifiedClassName()»());
	installEditPolicy(org.eclipse.gef.EditPolicy.DIRECT_EDIT_ROLE, new org.bonitasoft.studio.common.editPolicies.WidgetLabelDirectEditPolicy());
	installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, new «EXPAND nodeLabelDragPolicyQualifiedClassName FOR self.getDiagram()»());
	«EXPAND xpt::diagram::editparts::Common::behaviour FOR self-»
«ENDAROUND»



«DEFINE activate FOR gmfgen::GenNodeLabel-»
	«EXPAND xpt::Common::generatedMemberComment»
	@Override
	public void activate() {
		super.activate();
		final org.eclipse.emf.ecore.EObject resolveSemanticElement = resolveSemanticElement();
		if(resolveSemanticElement instanceof org.bonitasoft.studio.model.form.Widget 
		&& !(resolveSemanticElement instanceof org.bonitasoft.studio.model.form.MessageInfo)
		&& !(resolveSemanticElement instanceof org.bonitasoft.studio.model.form.HiddenWidget)
		&& !(resolveSemanticElement instanceof org.bonitasoft.studio.model.form.HtmlWidget)
		&& !(resolveSemanticElement instanceof org.bonitasoft.studio.model.form.IFrameWidget)){
			org.bonitasoft.studio.model.form.Widget widget = (org.bonitasoft.studio.model.form.Widget) resolveSemanticElement;
        	org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker.getInstance(getEditingDomain()).addNotificationListener(widget,org.bonitasoft.studio.model.form.FormPackage.Literals.WIDGET__DISPLAY_LABEL,expressionListener);
    		expressionListener.notifyChanged(new org.eclipse.emf.ecore.impl.ENotificationImpl((org.eclipse.emf.ecore.InternalEObject) widget,  org.eclipse.emf.ecore.util.FeatureMapUtil.FeatureENotificationImpl.SET, org.bonitasoft.studio.model.form.FormPackage.Literals.WIDGET__DISPLAY_LABEL, null, widget.getDisplayLabel()));
    	    org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker.getInstance(getEditingDomain()).addNotificationListener(widget,org.bonitasoft.studio.model.form.FormPackage.Literals.WIDGET__SHOW_DISPLAY_LABEL,listener);
		}
	}
«ENDDEFINE»

«DEFINE deactivate FOR gmfgen::GenNodeLabel-»
     @Override
    public void deactivate() {
    	org.eclipse.emf.ecore.EObject widget = resolveSemanticElement();
        if(widget instanceof org.bonitasoft.studio.model.form.Widget
        && !(widget instanceof org.bonitasoft.studio.model.form.MessageInfo)
		&& !(widget instanceof org.bonitasoft.studio.model.form.HiddenWidget)
		&& !(widget instanceof org.bonitasoft.studio.model.form.HtmlWidget)
		&& !(widget instanceof org.bonitasoft.studio.model.form.IFrameWidget)){
            DiagramEventBroker.getInstance(getEditingDomain()).removeNotificationListener(((org.bonitasoft.studio.model.form.Widget) widget).getDisplayLabel(), listener);
            DiagramEventBroker.getInstance(getEditingDomain()).removeNotificationListener(((org.bonitasoft.studio.model.form.Widget) widget), expressionListener);
        }
        super.deactivate();
    }
    «ENDDEFINE»

«AROUND handleNotificationEventBody FOR gmfgen::GenNodeLabel-»
	Object feature = event.getFeature();
	«IF isStoringChildPositions(node)-»
		«EXPAND xpt::diagram::editparts::Common::handleBounds FOR self-»
	«ENDIF-»
	«EXPAND xpt::diagram::editparts::Common::handleText FOR self-»
	if(org.bonitasoft.studio.model.expression.ExpressionPackage.eINSTANCE.getExpression_Content().equals(feature)){
		refreshLabel();
	}else if(org.bonitasoft.studio.model.form.FormPackage.eINSTANCE.getWidget_ShowDisplayLabel().equals(feature)){
		java.lang.Object newValue = event.getNewValue();
		if(newValue instanceof java.lang.Boolean){
                getNotationView().setVisible((java.lang.Boolean) newValue);
                refreshVisibility();
         }
	}
	super.handleNotificationEvent(event);
	
«ENDAROUND»

«REM»since 3.1, old generated NodeLabelDragPolicy extracted to GMFT-runtime, 
see org.eclipse.gmf.tooling.runtime.edit.policies.DefaultNodeLabelDragPolicy.
The next 2 DEFINE's are left here as a hook for backward compatibility with possible AROUND's
«ENDREM» 
«DEFINE nodeLabelDragPolicyQualifiedClassName FOR gmfgen::GenDiagram»org.eclipse.gmf.tooling.runtime.edit.policies.DefaultNodeLabelDragPolicy«ENDDEFINE»

«DEFINE nodeLabelDragPolicyClass FOR gmfgen::GenDiagram-»
«REM»not generated by default anymore«ENDREM»«-»
«ENDDEFINE»