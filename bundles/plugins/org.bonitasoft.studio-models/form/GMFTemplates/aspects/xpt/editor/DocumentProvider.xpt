/*
 * Copyright (C) 2009 BonitaSoft S.A.
 * BonitaSoft, 31 rue Gustave Eiffel - 38000 Grenoble
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2.0 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::editor::Utils»


«AROUND createEditingDomain FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.emf.transaction.TransactionalEditingDomain createEditingDomain(String id) {
	// Bonitasoft: use a shared editing domain
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.bonitasoft.studio.common.editingdomain.BonitaEditingDomainUtil.getSharedEditingDomain("«editingDomainID»"+(id != null? "."+id:""));;
	/*	
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.gmf.runtime.diagram.core.DiagramEditingDomainFactory.getInstance().createEditingDomain();
	editingDomain.setID("«editingDomainID»");«EXPAND xpt::Common::nonNLS»
	final org.eclipse.emf.transaction.NotificationFilter diagramResourceModifiedFilter = org.eclipse.emf.transaction.NotificationFilter.createNotifierFilter(editingDomain.getResourceSet()).and(org.eclipse.emf.transaction.NotificationFilter.createEventTypeFilter(org.eclipse.emf.common.notify.Notification.ADD)).and(org.eclipse.emf.transaction.NotificationFilter.createFeatureFilter(org.eclipse.emf.ecore.resource.ResourceSet.class, org.eclipse.emf.ecore.resource.ResourceSet.RESOURCE_SET__RESOURCES));
	editingDomain.getResourceSet().eAdapters().add(new org.eclipse.emf.common.notify.Adapter() {

		private org.eclipse.emf.common.notify.Notifier myTarger;

		public org.eclipse.emf.common.notify.Notifier getTarget() {
			return myTarger;
		}

		public boolean isAdapterForType(Object type) {
			return false;
		}

		public void notifyChanged(org.eclipse.emf.common.notify.Notification notification) {
			if (diagramResourceModifiedFilter.matches(notification)) {
				Object value = notification.getNewValue();
				if (value instanceof org.eclipse.emf.ecore.resource.Resource) {
					((org.eclipse.emf.ecore.resource.Resource) value).setTrackingModification(true);
				}
			}
		}

		public void setTarget(org.eclipse.emf.common.notify.Notifier newTarget) {
			myTarger = newTarget;
		}
			
	});	
	*/
	return editingDomain;
}
«ENDAROUND»

«AROUND createEditingDomain FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.emf.transaction.TransactionalEditingDomain createEditingDomain(String id) {
	// Bonitasoft: use a shared editing domaine
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.bonitasoft.studio.common.editingdomain.BonitaEditingDomainUtil.getSharedEditingDomain("«editingDomainID»"+(id != null? "."+id:"");
	/*	
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.gmf.runtime.diagram.core.DiagramEditingDomainFactory.getInstance().createEditingDomain();
	editingDomain.setID("«editingDomainID»");«EXPAND xpt::Common::nonNLS»
	final org.eclipse.emf.transaction.NotificationFilter diagramResourceModifiedFilter = org.eclipse.emf.transaction.NotificationFilter.createNotifierFilter(editingDomain.getResourceSet()).and(org.eclipse.emf.transaction.NotificationFilter.createEventTypeFilter(org.eclipse.emf.common.notify.Notification.ADD)).and(org.eclipse.emf.transaction.NotificationFilter.createFeatureFilter(org.eclipse.emf.ecore.resource.ResourceSet.class, org.eclipse.emf.ecore.resource.ResourceSet.RESOURCE_SET__RESOURCES));
	editingDomain.getResourceSet().eAdapters().add(new org.eclipse.emf.common.notify.Adapter() {

		private org.eclipse.emf.common.notify.Notifier myTarger;

		public org.eclipse.emf.common.notify.Notifier getTarget() {
			return myTarger;
		}

		public boolean isAdapterForType(Object type) {
			return false;
		}

		public void notifyChanged(org.eclipse.emf.common.notify.Notification notification) {
			if (diagramResourceModifiedFilter.matches(notification)) {
				Object value = notification.getNewValue();
				if (value instanceof org.eclipse.emf.ecore.resource.Resource) {
					((org.eclipse.emf.ecore.resource.Resource) value).setTrackingModification(true);
				}
			}
		}

		public void setTarget(org.eclipse.emf.common.notify.Notifier newTarget) {
			myTarger = newTarget;
		}
			
	});	
	*/
	return editingDomain;
}
«ENDAROUND»

«AROUND createEmptyDocument FOR gmfgen::GenDiagram-»
/**
 * @param id 
 * @generated BonitaSoft
 */
protected org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument createEmptyDocument(String id) {
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument document = new org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument();
	document.setEditingDomain(createEditingDomain(id));
	return document;
}

/**
 * @generated BonitaSoft
 */
protected org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument createEmptyDocument() {
	return createEmptyDocument(null);
}
«ENDAROUND»


«AROUND createDocument FOR gmfgen::GenDiagram-»
/**
 * @generated BonitaSoft
 */
protected org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument createDocument(Object element) throws org.eclipse.core.runtime.CoreException {
	«EXPAND xpt::editor::DocumentProvider::checkEditorInputInstance-»
	String id = null;
	if (element instanceof org.eclipse.ui.part.FileEditorInput) {
		org.eclipse.ui.part.FileEditorInput fInput = (org.eclipse.ui.part.FileEditorInput) element;
		id= fInput.getName();
	} else if (element instanceof org.eclipse.emf.common.ui.URIEditorInput){
		id = org.eclipse.emf.common.util.URI.decode(((org.eclipse.emf.common.ui.URIEditorInput) element).getURI().lastSegment());
	}
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document = createEmptyDocument(id);
	setDocumentContent(document, (org.eclipse.ui.IEditorInput) element);
	setupDocument(element, document);
	return document;
}
«ENDAROUND»

«AROUND handleElementChanged FOR gmfgen::GenDiagram-»
/**
 * @generated BonitaSoft
 */
protected void handleElementChanged(ResourceSetInfo info, org.eclipse.emf.ecore.resource.Resource changedResource, org.eclipse.core.runtime.IProgressMonitor monitor) {
	// BonitaSoft: Using the shared editing domain, we reload externally
	// changed resources centrally
	/*
	«IF null = editorGen.application-»
	org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(changedResource);
	if (file != null) {
		try {
			file.refreshLocal(org.eclipse.core.resources.IResource.DEPTH_INFINITE, monitor);
		} catch (org.eclipse.core.runtime.CoreException ex) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentProviderHandleElementContentChanged(self)) FOR editorGen», ex);
			// Error message to log was initially taken from org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.FileDocumentProvider_handleElementContentChanged
		}
	}
	«ENDIF-»
	changedResource.unload();
	*/
	fireElementContentAboutToBeReplaced(info.getEditorInput());
	removeUnchangedElementListeners(info.getEditorInput(), info);
	info.fStatus = null;
	try {
		setDocumentContent(info.fDocument, info.getEditorInput());
	} catch (org.eclipse.core.runtime.CoreException e) {
		info.fStatus = e.getStatus();
	}
«REM»TODO: Remove this if and call setModificationStamp only from doSaveDocument method«ENDREM»«-»
	if (!info.fCanBeSaved) {
		info.setModificationStamp(computeModificationStamp(info));
	}
	addUnchangedElementListeners(info.getEditorInput(), info);
	fireElementContentReplaced(info.getEditorInput());
}
«ENDAROUND»

«AROUND doSaveDocument FOR gmfgen::GenDiagram-»
/**
 * @generated BonitaSoft
 */
protected void doSaveDocument(org.eclipse.core.runtime.IProgressMonitor monitor, Object element, final org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document, boolean overwrite) throws org.eclipse.core.runtime.CoreException {
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		if (!overwrite && !info.isSynchronized()) {
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 
				«IF null = editorGen.application»org.eclipse.core.resources.IResourceStatus.OUT_OF_SYNC_LOCAL«ELSE»org.eclipse.core.runtime.IStatus.ERROR«ENDIF», 
				«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentUnsynchronizedFileSaveError(self)) FOR editorGen», 
				null));
		}
	«IF null = editorGen.application-»
		info.stopResourceListening();
	«ENDIF-»
		fireElementStateChanging(element);
		try {
			monitor.beginTask(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentSaveDiagramTask(self)) FOR editorGen», info.getResourceSet().getResources().size() + 1); //"Saving diagram"
			«EXPAND CodeStyle::iterate('nextResource', 'org.eclipse.emf.ecore.resource.Resource', 'it', 'info.getLoadedResourcesIterator()')-»
				monitor.setTaskName(org.eclipse.osgi.util.NLS.bind(
						«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentSaveNextResourceTask(self)) FOR editorGen», 
						nextResource.getURI()));
						«REM» //BonitaSoft
						add a check is the resource i smodified in order to avoid overwrite of the changement.«ENDREM»
				if (nextResource.isLoaded() && !info.getEditingDomain().isReadOnly(nextResource) && nextResource.isModified()) {
					try {
						nextResource.save(«EXPAND xpt::Common::getSaveOptions»);
					} catch (java.io.IOException e) {
						fireElementStateChangeFailed(element);
						throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes.RESOURCE_FAILURE, e.getLocalizedMessage(), null));
					}
				}
				monitor.worked(1);
			}
			monitor.done();
			info.setModificationStamp(computeModificationStamp(info));
		} catch (RuntimeException x) {
			fireElementStateChangeFailed(element);
			throw x;
		} «IF null = editorGen.application» finally {
			info.startResourceListening();
		} «ENDIF»
	} else {
		org.eclipse.emf.common.util.URI newResoruceURI;
		«EXPAND CodeStyle::G('java.util.List', 'org.eclipse.core.resources.IFile')» affectedFiles = null;
		«IF null = editorGen.application»if (element instanceof «EXPAND xpt::editor::DocumentProvider::fileEditorInputClassFQName») {
			org.eclipse.core.resources.IFile newFile = ((«EXPAND xpt::editor::DocumentProvider::fileEditorInputClassFQName») element).getFile();
			affectedFiles = java.util.Collections.singletonList(newFile);
			newResoruceURI = org.eclipse.emf.common.util.URI.createPlatformResourceURI(newFile.getFullPath().toString(), true);
		} else «ENDIF»if(element instanceof «EXPAND xpt::editor::DocumentProvider::uriEditorInputClassFQName») {
			newResoruceURI = ((«EXPAND xpt::editor::DocumentProvider::uriEditorInputClassFQName») element).getURI();
		} else {
			fireElementStateChangeFailed(element);
			«EXPAND xpt::editor::DocumentProvider::throwIncorrectInputException-»
		}
		if (false == document instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0,
			"Incorrect document used: " + document + " instead of org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument", null));«EXPAND xpt::Common::nonNLS(1)»«EXPAND xpt::Common::nonNLS(2)»
		}
		org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument diagramDocument = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document;
		final org.eclipse.emf.ecore.resource.Resource newResource = diagramDocument.getEditingDomain().getResourceSet().createResource(newResoruceURI);
		final org.eclipse.gmf.runtime.notation.Diagram diagramCopy = (org.eclipse.gmf.runtime.notation.Diagram) org.eclipse.emf.ecore.util.EcoreUtil.copy(diagramDocument.getDiagram());
		try {
			new org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand(diagramDocument.getEditingDomain(), org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentSaveAs(self)) FOR editorGen», diagramCopy.getName()), affectedFiles) {
				protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
					«REM»bug 288346«ENDREM»
					«IF editorGen.sameFileForDiagramAndModel»newResource.getContents().addAll(((org.eclipse.emf.ecore.EObject)document.getContent()).eResource().getContents());«ELSE»newResource.getContents().add(diagramCopy);«ENDIF»					
					return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult();
				}
			}.execute(monitor, null);
			newResource.save(«EXPAND xpt::Common::getSaveOptions»);
		} catch (org.eclipse.core.commands.ExecutionException e) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, e.getLocalizedMessage(), null));
		} catch (java.io.IOException e) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, e.getLocalizedMessage(), null));
		}
		newResource.unload();
	}
}
«ENDAROUND»
