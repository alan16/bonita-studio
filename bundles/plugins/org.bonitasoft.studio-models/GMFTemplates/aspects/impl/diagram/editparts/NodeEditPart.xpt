/*
 * Copyright (C) 2010 BonitaSoft S.A.
 * BonitaSoft, 31 rue Gustave Eiffel - 38000 Grenoble
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2.0 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»
«EXTENSION xpt::diagram::editparts::Utils»
«EXTENSION xpt::diagram::Utils»

«AROUND addFixedChild FOR gmfgen::GenNode-»
	/*
	* @generated by BonitaSoft
	*/
	protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
«FOREACH getInnerFixedLabels(self) AS label»«LET label.viewmap.oclAsType(gmfgen::ParentAssignedViewmap) AS childViewmap-»
		if (childEditPart instanceof «label.getEditPartQualifiedClassName()») {
			((«label.getEditPartQualifiedClassName()») childEditPart).«EXPAND impl::diagram::editparts::TextAware::labelSetterName FOR childViewmap»(getPrimaryShape().«childViewmap.getterName»());
			return true;
		}
«ENDLET»«ENDFOREACH-»
«FOREACH getPinnedCompartments(self) AS compartment»«LET compartment.viewmap.oclAsType(gmfgen::ParentAssignedViewmap) AS childViewmap-»
		if (childEditPart instanceof «compartment.getEditPartQualifiedClassName()») {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().«childViewmap.getterName»();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((«compartment.getEditPartQualifiedClassName()») childEditPart).getFigure());
			return true;
		}	
«ENDLET»«ENDFOREACH-»
«REM»For affixed children use a custom borderItemLocator«ENDREM»
«FOREACH getSideAffixedChildren(self) AS child-»
		if (childEditPart instanceof «child.getEditPartQualifiedClassName()») {
			org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator locator = new org.bonitasoft.studio.common.gmf.ActivityBorderItemLocator(getMainFigure(), org.eclipse.draw2d.PositionConstants.«child.preferredSideName»);
			getBorderedFigure().getBorderItemContainer().add(((«child.getEditPartQualifiedClassName()») childEditPart).getFigure(), locator);
			return true;
		}
«ENDFOREACH-»
		return false;
	}
«ENDAROUND»

«DEFINE getPrimaryDragEditPolicy FOR gmfgen::GenChildSideAffixedNode-»
	public org.eclipse.gef.EditPolicy getPrimaryDragEditPolicy() {
		return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy(){
			@Override
			protected void showPrimarySelection() {
				super.showPrimarySelection();
				hideSelection() ;
				org.eclipse.draw2d.IFigure layer = getLayer(org.eclipse.gef.LayerConstants.HANDLE_LAYER) ;
				layer.setBackgroundColor(org.eclipse.draw2d.ColorConstants.black) ;
				layer.setVisible(true) ;
				for(Object f : layer.getChildren()){
					((org.eclipse.draw2d.IFigure)f).setBackgroundColor(org.eclipse.draw2d.ColorConstants.black) ;
					((org.eclipse.draw2d.IFigure)f).setVisible(true) ;
				}
			}
			
			@Override
			protected org.eclipse.draw2d.IFigure createDragSourceFeedbackFigure() {
				org.eclipse.draw2d.IFigure r = org.bonitasoft.studio.common.diagram.tools.FiguresHelper.getSelectedFigure(resolveSemanticElement().eClass(), -1,-1, null, null) ;
				addFeedback(r);
				return r;
			}
		};
	}
«ENDDEFINE»

«DEFINE borderItemSelectionEditPolicy FOR gmfgen::GenNode-»
«REM»do not reset selection edit policy on child«ENDREM»
«ENDDEFINE»